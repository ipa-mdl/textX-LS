trigger:
  branches:
    include:
    - '*'

pr:
- master

strategy:
  matrix:
    linux-ubuntu-16-04:
      imageName: 'ubuntu-16.04'
    macOS:
      imageName: 'macOS-10.14'
    windows-64bit:
      imageName: 'vs2017-win2016'
      platform: x64
      winArch: 'win64'
    windows-32bit:
      imageName: 'vs2017-win2016'
      platform: x86
      winArch: 'win32'
pool:
  vmImage: $(imageName)

steps:
# Set python version - 64bit python 3.6
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
  condition: not(and(eq( variables['Agent.OS'], 'Windows_NT'), eq( variables['platform'], 'x86')))
# Set python version - 32bit python 3.6
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: x86
  condition: and(eq( variables['Agent.OS'], 'Windows_NT'), eq( variables['platform'], 'x86'))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    python -m pip install -r requirements.txt
    python -m pip install pytest-azurepipelines
  displayName: 'Install python dependencies'

- script: |
    python -m pre_commit run --all-files
  displayName: 'black, flake8 and bandit checks'

- script: |
    python -m pytest tests/ --cov textx_ls_core --cov-report html
  workingDirectory: textX-LS/core
  displayName: 'Run textX-LS-core tests'

- script: |
    python -m pytest tests/ --cov textx_ls_server --cov-report html
  workingDirectory: textX-LS/server
  displayName: 'Run textX-LS-server tests'

- task: Npm@1
  displayName: 'Install node modules'
  inputs:
    workingDir: client
    verbose: false

- bash: './node_modules/.bin/tslint src\*.ts'
  workingDirectory: client
  displayName: '[textX-vscode] tslint'
  continueOnError: true

- bash: 'exit 1'
  displayName: 'Fail if one of the steps succeeded with issues '
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues', 'Failed')

################################ BUILD VSIX ###################################
- bash: |
   # Append build id to versions
   get_setuppy_version() {
       version=$(grep -o "'\d.\d.\d'" $1)
       echo "${version//\'}"
   }
   replace_setuppy_version() {
       version=$(get_setuppy_version $1)
       build_version=$version+$2
       sed -i "" "s|$version|$build_version|g" $1
   }
   replace_packagejson_version() {
       version_line=$(grep -o '"version".*' $1)
       version=$(python -m json.tool package.json | awk -F'"' '/version/{print $4}')
       build_version=$version+$2
       build_version_line=${version_line/$version/$build_version}
       sed -i "" "s|$version_line|$build_version_line|g" $1
   }

   build_suffix=${BUILD_SOURCEVERSION:0:8}
   replace_setuppy_version ./textX-LS/core/setup.py $build_suffix
   replace_setuppy_version ./textX-LS/server/setup.py $build_suffix
   cd client
   replace_packagejson_version package.json $build_suffix

  displayName: 'Change versions (except for master branch and tags)'
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), True))

- bash: |
   # Build .vsix file
   ./node_modules/.bin/vsce package
   # Create output env vars
   this_folder=$(dirname "$(pwd)")
   TEXTX_LS_CORE_ARTIFACT_NAME=$(ls ./wheels | grep core)
   TEXTX_LS_SERVER_ARTIFACT_NAME=$(ls ./wheels | grep server)
   TEXTX_LS_VSCODE_ARTIFACT_NAME=$(ls | grep vsix)
   # Create output variables
   echo "##vso[task.setvariable variable=TEXTX_LS_CORE_ARTIFACT_NAME]$TEXTX_LS_CORE_ARTIFACT_NAME"
   echo "##vso[task.setvariable variable=TEXTX_LS_SERVER_ARTIFACT_NAME]$TEXTX_LS_SERVER_ARTIFACT_NAME"
   echo "##vso[task.setvariable variable=TEXTX_LS_VSCODE_ARTIFACT_NAME]$TEXTX_LS_VSCODE_ARTIFACT_NAME"
  workingDirectory: client
  displayName: 'Create wheels and extension file'

- task: CopyFiles@2
  displayName: 'Copy wheels and vsix to artifact staging dir'
  inputs:
    SourceFolder: client
    Contents: |
     wheels/*.whl
     *.vsix
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: '[textX-LS-core] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/wheels/$(TEXTX_LS_CORE_ARTIFACT_NAME)'
    ArtifactName: '$(TEXTX_LS_CORE_ARTIFACT_NAME)'

- task: PublishBuildArtifacts@1
  displayName: '[textX-LS-server] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/wheels/$(TEXTX_LS_SERVER_ARTIFACT_NAME)'
    ArtifactName: '$(TEXTX_LS_SERVER_ARTIFACT_NAME)'

- task: PublishBuildArtifacts@1
  displayName: '[textX-vscode] Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/$(TEXTX_LS_VSCODE_ARTIFACT_NAME)'
    ArtifactName: '$(TEXTX_LS_VSCODE_ARTIFACT_NAME)'
